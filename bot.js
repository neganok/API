const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const os = require('os');
const ngrok = require('ngrok');
const fetch = require('node-fetch');

// ==================== C·∫§U H√åNH ====================
const C·∫§U_H√åNH = {
  TOKEN: '7898378784:AAH7RAql823WY3nE25ph28kyO2N20Rhqbts',
  CHAT_ID: '7371969470',
  C·ªîNG_HTTP: Math.floor(Math.random() * 2000) + 8000,
  NGROK_AUTH: '2vYg8D0LBx82zPbpAwl0ZMGSyma_2MKuxq8wxjoxVagErnREc',
  TH·ªúI_GIAN_PING: 15000 // 15 gi√¢y
};

// ==================== KH·ªûI T·∫†O ====================
const bot = new TelegramBot(C·∫§U_H√åNH.TOKEN, { polling: false });
const l√†Master = process.env.MASTER === 'true';
const URL_MASTER = process.env.MASTER_URL;
const T√äN_M√ÅY = os.hostname();
let danhS√°chSlave = [];
let httpTunnel;
const app = express();
app.use(express.json());

// ==================== TI·ªÜN √çCH ====================
const l·∫•yGi·ªùVi·ªátNam = () => new Date().toLocaleString('vi-VN', {
  timeZone: 'Asia/Ho_Chi_Minh',
  hour12: false,
  year: 'numeric',
  month: '2-digit',
  day: '2-digit',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit'
});

const ch·∫°yNeofetch = () => new Promise(resolve => {
  exec('[ -f neofetch/neofetch ] && ./neofetch/neofetch --stdout || (command -v neofetch >/dev/null && neofetch --stdout) || echo "Kh√¥ng ch·∫°y ƒë∆∞·ª£c neofetch"',
    { timeout: 5000 },
    (error, stdout, stderr) => resolve(stdout || stderr || error?.message || 'Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin h·ªá th·ªëng')
  );
});

const l·∫•ySlaveOnline = () => danhS√°chSlave.filter(s => Date.now() - s.lastPing < C·∫§U_H√åNH.TH·ªúI_GIAN_PING);

// ==================== X·ª¨ L√ù SLAVE ====================
const x·ª≠L√ΩSlave = async (t√™nM√°y, c·ªïng) => {
  const ƒë√£C√≥ = danhS√°chSlave.findIndex(s => s.t√™nM√°y === t√™nM√°y);
  const slave = { t√™nM√°y, c·ªïng: c·ªïng || 'N/A', lastPing: Date.now() };

  if (ƒë√£C√≥ >= 0) {
    danhS√°chSlave[ƒë√£C√≥] = slave;
  } else {
    danhS√°chSlave.push(slave);
    await bot.sendMessage(C·∫§U_H√åNH.CHAT_ID, `üïí [${l·∫•yGi·ªùVi·ªátNam()}] Slave k·∫øt n·ªëi:\nüè∑Ô∏è ${t√™nM√°y}\nüîå C·ªïng: ${c·ªïng || 'N/A'}`);
    
    if (!l√†Master) {
      const th√¥ngTin = await ch·∫°yNeofetch();
      await bot.sendMessage(C·∫§U_H√åNH.CHAT_ID, `üñ•Ô∏è Th√¥ng tin slave ${t√™nM√°y}:\n\`\`\`\n${th√¥ngTin}\n\`\`\``, { parse_mode: 'Markdown' });
    }
  }
};

// ==================== X·ª¨ L√ù L·ªÜNH ====================
const x·ª≠L√ΩL·ªánhTr√™nSlave = async (slave, l·ªánh) => {
  try {
    const response = await fetch(`http://${slave.t√™nM√°y}:${slave.c·ªïng}/execute`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ command: l·ªánh }),
      timeout: 10000
    });
    return await response.json();
  } catch (e) {
    return { error: e.message };
  }
};

// ==================== API ====================
app.post(`/bot${C·∫§U_H√åNH.TOKEN}`, async (req, res) => {
  const { text, chat } = req.body.message || {};
  if (!text?.startsWith('/')) return res.sendStatus(200);

  const l·ªánh = text.slice(1).split(' ');
  const [cmd, ...args] = l·ªánh;

  try {
    switch (cmd) {
      case 'help':
        await bot.sendMessage(chat.id, 'üõ†Ô∏è Danh s√°ch l·ªánh:\n/status - Tr·∫°ng th√°i h·ªá th·ªëng\n/cmd [l·ªánh] - Th·ª±c thi l·ªánh\n/neofetch - Th√¥ng tin h·ªá th·ªëng\n/help - Tr·ª£ gi√∫p');
        break;

      case 'status':
        const online = l·∫•ySlaveOnline();
        let msg = `üïí [${l·∫•yGi·ªùVi·ªátNam()}]\nüü¢ Master: ${T√äN_M√ÅY}\nüì° Online: ${online.length}/${danhS√°chSlave.length}\n`;
        online.forEach(s => msg += `ü§ñ ${s.t√™nM√°y} (c·ªïng:${s.c·ªïng}, ping:${Math.floor((Date.now() - s.lastPing)/1000}s)\n`);
        await bot.sendMessage(chat.id, msg);
        break;

      case 'neofetch':
        const info = await ch·∫°yNeofetch();
        await bot.sendMessage(chat.id, `üïí [${l·∫•yGi·ªùVi·ªátNam()}]\nüñ•Ô∏è ${T√äN_M√ÅY}:\n\`\`\`\n${info}\n\`\`\``, { parse_mode: 'Markdown' });
        break;

      case 'cmd':
        if (!l√†Master) return await bot.sendMessage(chat.id, '‚ö†Ô∏è L·ªánh ch·ªâ d√†nh cho master');
        const command = args.join(' ');
        if (!command) return await bot.sendMessage(chat.id, '‚ö†Ô∏è Thi·∫øu l·ªánh');
        
        const slaves = l·∫•ySlaveOnline();
        if (!slaves.length) return await bot.sendMessage(chat.id, '‚ö†Ô∏è Kh√¥ng c√≥ slave n√†o online');
        
        await bot.sendMessage(chat.id, `‚öôÔ∏è ƒêang th·ª±c thi "${command}" tr√™n ${slaves.length} slave...`);
        
        for (const slave of slaves) {
          const { result, error } = await x·ª≠L√ΩL·ªánhTr√™nSlave(slave, command);
          await bot.sendMessage(chat.id, `üíª ${slave.t√™nM√°y}:\n\`\`\`\n${error || result}\n\`\`\``, { parse_mode: 'Markdown' });
        }
        break;

      default:
        await bot.sendMessage(chat.id, '‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá');
    }
  } catch (e) {
    console.error('L·ªói x·ª≠ l√Ω l·ªánh:', e);
    await bot.sendMessage(chat.id, '‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh');
  } finally {
    res.sendStatus(200);
  }
});

app.post('/register', async (req, res) => {
  const { hostname, port } = req.body;
  if (hostname) await x·ª≠L√ΩSlave(hostname, port);
  res.sendStatus(200);
});

app.post('/execute', async (req, res) => {
  if (l√†Master) return res.sendStatus(403);
  const { command } = req.body;
  exec(command, { timeout: 10000 }, (e, out, err) => {
    res.json({ result: (out || err || e?.message || 'Kh√¥ng c√≥ k·∫øt qu·∫£').trim() });
  });
});

// ==================== GI√ÅM S√ÅT ====================
setInterval(() => {
  const now = Date.now();
  danhS√°chSlave.filter(s => now - s.lastPing > C·∫§U_H√åNH.TH·ªúI_GIAN_PING)
    .forEach(s => bot.sendMessage(C·∫§U_H√åNH.CHAT_ID, `üïí [${l·∫•yGi·ªùVi·ªátNam()}] Slave ng·∫Øt k·∫øt n·ªëi: ${s.t√™nM√°y}`));
  danhS√°chSlave = danhS√°chSlave.filter(s => now - s.lastPing < C·∫§U_H√åNH.TH·ªúI_GIAN_PING);
}, 3000);

// ==================== KH·ªûI ƒê·ªòNG ====================
app.listen(C·∫§U_H√åNH.C·ªîNG_HTTP, async () => {
  console.log(`üöÄ Server ch·∫°y tr√™n c·ªïng ${C·∫§U_H√åNH.C·ªîNG_HTTP}`);

  if (l√†Master) {
    try {
      httpTunnel = await ngrok.connect({
        addr: C·∫§U_H√åNH.C·ªîNG_HTTP,
        authtoken: C·∫§U_H√åNH.NGROK_AUTH,
        region: 'ap'
      });
      console.log(`üåê Ngrok tunnel: ${httpTunnel}`);

      await bot.setWebHook(`${httpTunnel}/bot${C·∫§U_H√åNH.TOKEN}`);
      const info = await ch·∫°yNeofetch();
      
      await bot.sendMessage(
        C·∫§U_H√åNH.CHAT_ID,
        `üïí [${l·∫•yGi·ªùVi·ªátNam()}]\nüéØ Master ${T√äN_M√ÅY} ƒë√£ s·∫µn s√†ng!\n` +
        `üîó URL: ${httpTunnel}\nüîå C·ªïng: ${C·∫§U_H√åNH.C·ªîNG_HTTP}\n\n` +
        `L·ªánh ch·∫°y Slave:\n\`\`\`\nMASTER_URL="${httpTunnel}" node bot.js\n\`\`\`\n` +
        `\`\`\`\n${info}\n\`\`\``,
        { parse_mode: 'Markdown' }
      );
    } catch (e) {
      console.error('Kh·ªüi ƒë·ªông master th·∫•t b·∫°i:', e);
      process.exit(1);
    }
  } else if (URL_MASTER) {
    setInterval(async () => {
      try {
        await fetch(`${URL_MASTER}/register`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            hostname: T√äN_M√ÅY, 
            port: C·∫§U_H√åNH.C·ªîNG_HTTP 
          })
        });
      } catch (e) {
        console.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi master:', e.message);
      }
    }, 3000);
  }
});
