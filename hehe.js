// npm install express node-telegram-bot-api ngrok 
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const os = require('os');
const ngrok = require('ngrok');

// ==================== C·∫§U H√åNH ====================
const C·∫§U_H√åNH = {
  TOKEN: '7898378784:AAH7RAql823WY3nE25ph28kyO2N20Rhqbts',
  CHAT_ID: '7371969470',
  C·ªîNG_HTTP: Math.floor(Math.random() * 2000) + 8000,
  NGROK_AUTH: '2vYg8D0LBx82zPbpAwl0ZMGSyma_2MKuxq8wxjoxVagErnREc'
};

// ==================== KH·ªûI T·∫†O ====================
const bot = new TelegramBot(C·∫§U_H√åNH.TOKEN);
const l√†Master = process.env.MASTER === 'true';
const URL_MASTER = process.env.MASTER_URL;
const T√äN_M√ÅY = os.hostname();
let danhS√°chSlave = [];
let httpTunnel;
const app = express();
app.use(express.json());

// ==================== TI·ªÜN √çCH ====================

// L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam
const l·∫•yGi·ªùVi·ªátNam = () => new Date().toLocaleString('vi-VN', {
  timeZone: 'Asia/Ho_Chi_Minh',
  hour12: false,
  year: 'numeric',
  month: '2-digit',
  day: '2-digit',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit'
});

// Ch·∫°y l·ªánh neofetch ƒë·ªÉ l·∫•y th√¥ng tin h·ªá th·ªëng
const ch·∫°yNeofetch = (callback) => exec(
  '[ -f neofetch/neofetch ] && ./neofetch/neofetch --stdout || (command -v neofetch >/dev/null && neofetch --stdout) || (git clone https://github.com/dylanaraps/neofetch 2>/dev/null && ./neofetch/neofetch --stdout) || echo "Kh√¥ng ch·∫°y ƒë∆∞·ª£c neofetch"',
  { timeout: 5000 },
  (error, stdout, stderr) => callback(stdout || stderr || error?.message || 'Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin h·ªá th·ªëng')
);

// L·∫•y danh s√°ch slave ƒëang online
const l·∫•ySlaveOnline = () => danhS√°chSlave.filter(s => Date.now() - s.lastPing < 15000);

// ==================== X·ª¨ L√ù TH√îNG B√ÅO ====================

// G·ª≠i th√¥ng b√°o thay ƒë·ªïi tr·∫°ng th√°i slave
const th√¥ngB√°oSlave = async (t√™nM√°y, ƒëangK·∫øtN·ªëi, c·ªïng = 'kh√¥ng r√µ') => {
  try {
    const th·ªùiGian = l·∫•yGi·ªùVi·ªátNam();
    const tinNh·∫Øn = ƒëangK·∫øtN·ªëi 
      ? `üïí [${th·ªùiGian}] Slave k·∫øt n·ªëi:\nüè∑Ô∏è ${t√™nM√°y}\nüîå C·ªïng: ${c·ªïng}`
      : `üïí [${th·ªùiGian}] Slave ng·∫Øt k·∫øt n·ªëi: ${t√™nM√°y}`;
    
    if (ƒëangK·∫øtN·ªëi) {
      ch·∫°yNeofetch(async (th√¥ngTin) => {
        await bot.sendMessage(C·∫§U_H√åNH.CHAT_ID, `${tinNh·∫Øn}\n\nüñ•Ô∏è Th√¥ng tin h·ªá th·ªëng:\n\`\`\`\n${th√¥ngTin}\n\`\`\``, { parse_mode: 'Markdown' });
      });
    } else {
      await bot.sendMessage(C·∫§U_H√åNH.CHAT_ID, tinNh·∫Øn);
    }
  } catch (l·ªói) {
    console.error('L·ªói g·ª≠i th√¥ng b√°o:', l·ªói.message);
  }
};

// ==================== X·ª¨ L√ù L·ªÜNH ====================

// X·ª≠ l√Ω l·ªánh help
const x·ª≠L√ΩHelp = async (idChat) => {
  await bot.sendMessage(idChat, `üõ†Ô∏è Danh s√°ch l·ªánh:\n/status - Tr·∫°ng th√°i h·ªá th·ªëng\n/cmd [l·ªánh] - Th·ª±c thi l·ªánh\n/neofetch - Th√¥ng tin h·ªá th·ªëng\n/help - Tr·ª£ gi√∫p`);
};

// X·ª≠ l√Ω l·ªánh status
const x·ª≠L√ΩStatus = async (idChat) => {
  const online = l·∫•ySlaveOnline();
  let tinNh·∫Øn = `üïí [${l·∫•yGi·ªùVi·ªátNam()}]\nüü¢ Master: ${T√äN_M√ÅY}\nüì° ƒêang online: ${online.length}/${danhS√°chSlave.length}\n`;
  online.forEach(s => {
    const pingGi√¢y = Math.floor((Date.now() - s.lastPing) / 1000);
    tinNh·∫Øn += `ü§ñ ${s.t√™nM√°y} (c·ªïng:${s.c·ªïng}, ping:${pingGi√¢y}s)\n`;
  });
  await bot.sendMessage(idChat, tinNh·∫Øn);
};

// X·ª≠ l√Ω l·ªánh neofetch
const x·ª≠L√ΩNeofetch = async (idChat) => {
  ch·∫°yNeofetch(async (th√¥ngTin) => {
    await bot.sendMessage(idChat, `üïí [${l·∫•yGi·ªùVi·ªátNam()}]\nüñ•Ô∏è ${T√äN_M√ÅY}:\n\`\`\`\n${th√¥ngTin}\n\`\`\``, { parse_mode: 'Markdown' });
  });
};

// X·ª≠ l√Ω l·ªánh cmd
const x·ª≠L√ΩL·ªánh = async (idChat, l·ªánh) => {
  const slaveOnline = l·∫•ySlaveOnline();
  if (!slaveOnline.length) return await bot.sendMessage(idChat, '‚ö†Ô∏è Kh√¥ng c√≥ slave n√†o online');
  
  await bot.sendMessage(idChat, `‚öôÔ∏è ƒêang th·ª±c thi tr√™n ${slaveOnline.length} slave...`);
  
  for (const slave of slaveOnline) {
    try {
      const k·∫øtQu·∫£ = await new Promise(resolve => exec(
        l·ªánh, 
        { timeout: 10000 }, 
        (e, out, err) => resolve((out || err || e?.message || 'Kh√¥ng c√≥ k·∫øt qu·∫£').trim())
      ));
      await bot.sendMessage(idChat, `üíª ${slave.t√™nM√°y}:\n\`\`\`\n${k·∫øtQu·∫£}\n\`\`\``, { parse_mode: 'Markdown' });
    } catch (e) {
      await bot.sendMessage(idChat, `‚ö†Ô∏è L·ªói t·ª´ ${slave.t√™nM√°y}: ${e.message}`);
    }
  }
};

// ==================== API ====================

// X·ª≠ l√Ω webhook Telegram
app.post(`/bot${C·∫§U_H√åNH.TOKEN}`, (req, res) => {
  const { text, chat } = req.body.message || {};
  if (!text?.startsWith('/')) return res.sendStatus(200);

  const l·ªánh = text.slice(1);
  const b·ªôX·ª≠L√Ω = {
    'help': () => x·ª≠L√ΩHelp(chat.id),
    'status': () => x·ª≠L√ΩStatus(chat.id),
    'neofetch': () => x·ª≠L√ΩNeofetch(chat.id),
    'cmd': () => x·ª≠L√ΩL·ªánh(chat.id, l·ªánh.slice(4).trim())
  };

  const x·ª≠L√Ω = b·ªôX·ª≠L√Ω[l·ªánh.split(' ')[0]] || (() => bot.sendMessage(chat.id, '‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá'));
  x·ª≠L√Ω().finally(() => res.sendStatus(200));
});

// API ƒëƒÉng k√Ω slave
app.post('/register', (req, res) => {
  const { hostname, port } = req.body;
  if (!hostname) return res.sendStatus(400);

  const ƒë√£C√≥ = danhS√°chSlave.findIndex(s => s.t√™nM√°y === hostname);
  const d·ªØLi·ªáuSlave = { t√™nM√°y: hostname, c·ªïng: port || 'kh√¥ng r√µ', lastPing: Date.now() };

  if (ƒë√£C√≥ >= 0) danhS√°chSlave[ƒë√£C√≥] = d·ªØLi·ªáuSlave;
  else {
    danhS√°chSlave.push(d·ªØLi·ªáuSlave);
    th√¥ngB√°oSlave(hostname, true, port);
  }
  res.sendStatus(200);
});

// ==================== GI√ÅM S√ÅT ====================

// Ki·ªÉm tra slave ƒë·ªãnh k·ª≥
setInterval(() => {
  const b√¢yGi·ªù = Date.now();
  danhS√°chSlave.filter(s => b√¢yGi·ªù - s.lastPing > 15000)
    .forEach(s => th√¥ngB√°oSlave(s.t√™nM√°y, false));
  danhS√°chSlave = danhS√°chSlave.filter(s => b√¢yGi·ªù - s.lastPing < 15000);
}, 3000);

// ==================== KH·ªûI ƒê·ªòNG ====================

app.listen(C·∫§U_H√åNH.C·ªîNG_HTTP, async () => {
  console.log(`üöÄ M√°y ch·ªß ch·∫°y tr√™n c·ªïng ${C·∫§U_H√åNH.C·ªîNG_HTTP}`);

  if (l√†Master) {
    try {
      httpTunnel = await ngrok.connect({
        addr: C·∫§U_H√åNH.C·ªîNG_HTTP,
        authtoken: C·∫§U_H√åNH.NGROK_AUTH,
        region: 'ap'
      });
      console.log(`üåê ƒê∆∞·ªùng h·∫ßm: ${httpTunnel}`);

      await bot.setWebHook(`${httpTunnel}/bot${C·∫§U_H√åNH.TOKEN}`);
      console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p webhook');

      ch·∫°yNeofetch(async (th√¥ngTin) => {
        await bot.sendMessage(
          C·∫§U_H√åNH.CHAT_ID,
          `üïí [${l·∫•yGi·ªùVi·ªátNam()}]\nüéØ Master ${T√äN_M√ÅY} ƒë√£ s·∫µn s√†ng!\nüîó ${httpTunnel}\nüîå C·ªïng: ${C·∫§U_H√åNH.C·ªîNG_HTTP}\n\nL·ªánh ch·∫°y Slave:\n\`\`\`\nMASTER_URL="${httpTunnel}" node bot.js\n\`\`\`\n\`\`\`\n${th√¥ngTin}\n\`\`\``,
          { parse_mode: 'Markdown' }
        );
      });
    } catch (l·ªói) {
      console.error('L·ªói kh·ªüi t·∫°o:', l·ªói.message);
      process.exit(1);
    }
  } else if (URL_MASTER) {
    setInterval(() => fetch(`${URL_MASTER}/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ hostname: T√äN_M√ÅY, port: C·∫§U_H√åNH.C·ªîNG_HTTP })
    }).catch(console.error), 3000);
  }
});